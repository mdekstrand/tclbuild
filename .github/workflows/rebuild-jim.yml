name: Rebuild JimTCL
on:
  push:
    branches:
    - main

concurrency:
  group: test-${{github.ref}}
  cancel-in-progress: true

jobs:
  linux:
    name: Build jimtcl for linux-${{matrix.arch}}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch:
        - x86_64
        # - x86
        - aarch64
        - armhf
        - armv7

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - uses: jirutka/setup-alpine@v1
      with:
        arch: ${{ matrix.arch }}
        branch: v3.17
        packages: build-base openssl tcl

    - name: Build custom Jim
      shell: alpine.sh {0}
      id: build-jim
      run: |
        tclsh build.tcl --strip

    - name: Build default Jim
      shell: alpine.sh {0}
      id: build-jim-default
      if: ${{ matrix.arch == 'x86_64' }}
      run: |
        tclsh build.tcl -p default

    - name: Sign build artifacts
      shell: alpine.sh {0}
      env:
        SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
      run: |
        test -n "$SIGNING_KEY_PASSWORD" && tclsh sigtool.tcl --sign -s hmac --all-results

    - uses: actions/upload-artifact@v3
      with:
        name: jimsh-build
        path: dist/

  macos:
    name: Build jimtcl for Mac
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Dump TCL environment info
      run: |
        tclsh envinfo.tcl

    - name: Build custom Jim for Intel
      id: build-jim-intel
      run: |
        tclsh build.tcl -a x86_64 --strip

    - name: Build custom Jim for ARM
      id: build-jim-arm
      run: |
        tclsh build.tcl -a arm64 --strip

    - name: Build default Jim for Intel
      id: build-jim-default-intel
      run: |
        tclsh build.tcl -p default -a x86_64

    - name: Build default Jim for ARM
      id: build-jim-default-arm
      run: |
        tclsh build.tcl -p default -a arm64

    - name: Sign build artifacts
      env:
        SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
      run: |
        test -n "$SIGNING_KEY_PASSWORD" && tclsh sigtool.tcl --sign -s hmac --all-results

    - uses: actions/upload-artifact@v3
      with:
        name: jimsh-build
        path: dist/

  windows:
    name: Build jimtcl for Windows
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - uses: msys2/setup-msys2@v2
      with:
        update: true
        msystem: mingw32
        install: >-
          openssl
          mingw-w64-i686-gcc
          make
          tcl

    - name: Dump environment info
      shell: msys2 {0}
      run: |
        tclsh envinfo.tcl

    - name: Build custom Jim for Windows
      id: build-jim-custom
      shell: msys2 {0}
      run: |
        tclsh build.tcl --strip

    - name: Build default Jim for Windows
      id: build-jim-default
      shell: msys2 {0}
      run: |
        tclsh build.tcl -p default

    - name: Sign build artifacts
      shell: msys2 {0}
      env:
        SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
      run: |
        test -n "$SIGNING_KEY_PASSWORD" && tclsh sigtool.tcl --sign -s hmac --all-results

    - uses: actions/upload-artifact@v3
      with:
        name: jimsh-build
        path: dist/

  publish:
    name: Sign and publish results
    runs-on: ubuntu-latest
    needs:
    - linux
    - macos
    - windows

    env:
      SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

    steps:
    - name: üõí Check out source
      uses: actions/checkout@v3
      with:
        submodules: recursive

    # we use Alpine for ease in getting required packages
    - name: ‚õ∑Ô∏è Set up Alpine environment
      uses: jirutka/setup-alpine@v1
      with:
        arch: x86_64
        branch: v3.17
        packages: tcl openssl signify minisign expect mdbook coreutils

    - name: üõ¨ Fetch build artifacts
      uses: actions/download-artifact@v3
      with:
        name: jimsh-build
        path: dist

    - name: ‚úîÔ∏è Verify artifact HMACs
      shell: alpine.sh {0}
      id: verify-builds
      if: ${{ env.SIGNING_KEY_PASSWORD }}
      run: |
        tclsh sigtool.tcl --verify --require -s hmac --all-results

    - name: ‚úçÔ∏è Sign artifacts
      shell: alpine.sh {0}
      id: sign-builds
      if: ${{ env.SIGNING_KEY_PASSWORD }}
      run: |
        tclsh sigtool.tcl --sign -A

    - name: ‚úçÔ∏è Check signatures
      shell: alpine.sh {0}
      id: verify-signagures
      if: ${{ env.SIGNING_KEY_PASSWORD }}
      run: |
        # make sure those signatures we just generated work
        tclsh sigtool.tcl --verify -A --require

    - name: üßá Generate distribution hashes
      shell: alpine.sh {0}
      id: hash-builds
      run: |
        tclsh disttool.tcl --checksum --all

    - name: ü™µ Generate distribution manifests
      shell: alpine.sh {0}
      run: |
        tclsh disttool.tcl --manifest --all

    - name: üìá Generate documentation site
      shell: alpine.sh {0}
      run: mdbook build

    - name: üöõ Copy distribution files
      run: |
        rsync -rv dist/ site/dist/
        cp -v keys/*.pub site/dist/

    - name: üì§ Deploy site
      uses: netlify/actions/cli@master
      if: ${{ env.NETLIFY_AUTH_TOKEN }}
      with:
        args: deploy --dir=site --prod
      env:
        NETLIFY_SITE_ID: 5dff77d2-34d5-4a8a-b9bd-b9464b0d88fc
